/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthLayoutImport } from './routes/_auth-layout'
import { Route as AuthLayoutIndexImport } from './routes/_auth-layout/index'
import { Route as AuthLayoutSettingsImport } from './routes/_auth-layout/settings'
import { Route as AuthLayoutRunsIndexImport } from './routes/_auth-layout/runs/index'
import { Route as AuthLayoutReportingIndexImport } from './routes/_auth-layout/reporting/index'
import { Route as AuthLayoutReceivingIndexImport } from './routes/_auth-layout/receiving/index'
import { Route as AuthLayoutQueueIndexImport } from './routes/_auth-layout/queue/index'
import { Route as AuthLayoutAccessionsIndexImport } from './routes/_auth-layout/accessions/index'
import { Route as AuthLayoutSettingsPanelsImport } from './routes/_auth-layout/settings.panels'
import { Route as AuthLayoutSettingsOrganizationsImport } from './routes/_auth-layout/settings.organizations'
import { Route as AuthLayoutAccessionsAccessionIdImport } from './routes/_auth-layout/accessions/$accessionId'

// Create/Update Routes

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_auth-layout',
  getParentRoute: () => rootRoute,
} as any)

const AuthLayoutIndexRoute = AuthLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutSettingsRoute = AuthLayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutRunsIndexRoute = AuthLayoutRunsIndexImport.update({
  id: '/runs/',
  path: '/runs/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutReportingIndexRoute = AuthLayoutReportingIndexImport.update({
  id: '/reporting/',
  path: '/reporting/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutReceivingIndexRoute = AuthLayoutReceivingIndexImport.update({
  id: '/receiving/',
  path: '/receiving/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutQueueIndexRoute = AuthLayoutQueueIndexImport.update({
  id: '/queue/',
  path: '/queue/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutAccessionsIndexRoute = AuthLayoutAccessionsIndexImport.update({
  id: '/accessions/',
  path: '/accessions/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutSettingsPanelsRoute = AuthLayoutSettingsPanelsImport.update({
  id: '/panels',
  path: '/panels',
  getParentRoute: () => AuthLayoutSettingsRoute,
} as any)

const AuthLayoutSettingsOrganizationsRoute =
  AuthLayoutSettingsOrganizationsImport.update({
    id: '/organizations',
    path: '/organizations',
    getParentRoute: () => AuthLayoutSettingsRoute,
  } as any)

const AuthLayoutAccessionsAccessionIdRoute =
  AuthLayoutAccessionsAccessionIdImport.update({
    id: '/accessions/$accessionId',
    path: '/accessions/$accessionId',
    getParentRoute: () => AuthLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth-layout': {
      id: '/_auth-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_auth-layout/settings': {
      id: '/_auth-layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthLayoutSettingsImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/': {
      id: '/_auth-layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthLayoutIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/accessions/$accessionId': {
      id: '/_auth-layout/accessions/$accessionId'
      path: '/accessions/$accessionId'
      fullPath: '/accessions/$accessionId'
      preLoaderRoute: typeof AuthLayoutAccessionsAccessionIdImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/settings/organizations': {
      id: '/_auth-layout/settings/organizations'
      path: '/organizations'
      fullPath: '/settings/organizations'
      preLoaderRoute: typeof AuthLayoutSettingsOrganizationsImport
      parentRoute: typeof AuthLayoutSettingsImport
    }
    '/_auth-layout/settings/panels': {
      id: '/_auth-layout/settings/panels'
      path: '/panels'
      fullPath: '/settings/panels'
      preLoaderRoute: typeof AuthLayoutSettingsPanelsImport
      parentRoute: typeof AuthLayoutSettingsImport
    }
    '/_auth-layout/accessions/': {
      id: '/_auth-layout/accessions/'
      path: '/accessions'
      fullPath: '/accessions'
      preLoaderRoute: typeof AuthLayoutAccessionsIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/queue/': {
      id: '/_auth-layout/queue/'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof AuthLayoutQueueIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/receiving/': {
      id: '/_auth-layout/receiving/'
      path: '/receiving'
      fullPath: '/receiving'
      preLoaderRoute: typeof AuthLayoutReceivingIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/reporting/': {
      id: '/_auth-layout/reporting/'
      path: '/reporting'
      fullPath: '/reporting'
      preLoaderRoute: typeof AuthLayoutReportingIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_auth-layout/runs/': {
      id: '/_auth-layout/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof AuthLayoutRunsIndexImport
      parentRoute: typeof AuthLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthLayoutSettingsRouteChildren {
  AuthLayoutSettingsOrganizationsRoute: typeof AuthLayoutSettingsOrganizationsRoute
  AuthLayoutSettingsPanelsRoute: typeof AuthLayoutSettingsPanelsRoute
}

const AuthLayoutSettingsRouteChildren: AuthLayoutSettingsRouteChildren = {
  AuthLayoutSettingsOrganizationsRoute: AuthLayoutSettingsOrganizationsRoute,
  AuthLayoutSettingsPanelsRoute: AuthLayoutSettingsPanelsRoute,
}

const AuthLayoutSettingsRouteWithChildren =
  AuthLayoutSettingsRoute._addFileChildren(AuthLayoutSettingsRouteChildren)

interface AuthLayoutRouteChildren {
  AuthLayoutSettingsRoute: typeof AuthLayoutSettingsRouteWithChildren
  AuthLayoutIndexRoute: typeof AuthLayoutIndexRoute
  AuthLayoutAccessionsAccessionIdRoute: typeof AuthLayoutAccessionsAccessionIdRoute
  AuthLayoutAccessionsIndexRoute: typeof AuthLayoutAccessionsIndexRoute
  AuthLayoutQueueIndexRoute: typeof AuthLayoutQueueIndexRoute
  AuthLayoutReceivingIndexRoute: typeof AuthLayoutReceivingIndexRoute
  AuthLayoutReportingIndexRoute: typeof AuthLayoutReportingIndexRoute
  AuthLayoutRunsIndexRoute: typeof AuthLayoutRunsIndexRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutSettingsRoute: AuthLayoutSettingsRouteWithChildren,
  AuthLayoutIndexRoute: AuthLayoutIndexRoute,
  AuthLayoutAccessionsAccessionIdRoute: AuthLayoutAccessionsAccessionIdRoute,
  AuthLayoutAccessionsIndexRoute: AuthLayoutAccessionsIndexRoute,
  AuthLayoutQueueIndexRoute: AuthLayoutQueueIndexRoute,
  AuthLayoutReceivingIndexRoute: AuthLayoutReceivingIndexRoute,
  AuthLayoutReportingIndexRoute: AuthLayoutReportingIndexRoute,
  AuthLayoutRunsIndexRoute: AuthLayoutRunsIndexRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthLayoutRouteWithChildren
  '/settings': typeof AuthLayoutSettingsRouteWithChildren
  '/': typeof AuthLayoutIndexRoute
  '/accessions/$accessionId': typeof AuthLayoutAccessionsAccessionIdRoute
  '/settings/organizations': typeof AuthLayoutSettingsOrganizationsRoute
  '/settings/panels': typeof AuthLayoutSettingsPanelsRoute
  '/accessions': typeof AuthLayoutAccessionsIndexRoute
  '/queue': typeof AuthLayoutQueueIndexRoute
  '/receiving': typeof AuthLayoutReceivingIndexRoute
  '/reporting': typeof AuthLayoutReportingIndexRoute
  '/runs': typeof AuthLayoutRunsIndexRoute
}

export interface FileRoutesByTo {
  '/settings': typeof AuthLayoutSettingsRouteWithChildren
  '/': typeof AuthLayoutIndexRoute
  '/accessions/$accessionId': typeof AuthLayoutAccessionsAccessionIdRoute
  '/settings/organizations': typeof AuthLayoutSettingsOrganizationsRoute
  '/settings/panels': typeof AuthLayoutSettingsPanelsRoute
  '/accessions': typeof AuthLayoutAccessionsIndexRoute
  '/queue': typeof AuthLayoutQueueIndexRoute
  '/receiving': typeof AuthLayoutReceivingIndexRoute
  '/reporting': typeof AuthLayoutReportingIndexRoute
  '/runs': typeof AuthLayoutRunsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth-layout': typeof AuthLayoutRouteWithChildren
  '/_auth-layout/settings': typeof AuthLayoutSettingsRouteWithChildren
  '/_auth-layout/': typeof AuthLayoutIndexRoute
  '/_auth-layout/accessions/$accessionId': typeof AuthLayoutAccessionsAccessionIdRoute
  '/_auth-layout/settings/organizations': typeof AuthLayoutSettingsOrganizationsRoute
  '/_auth-layout/settings/panels': typeof AuthLayoutSettingsPanelsRoute
  '/_auth-layout/accessions/': typeof AuthLayoutAccessionsIndexRoute
  '/_auth-layout/queue/': typeof AuthLayoutQueueIndexRoute
  '/_auth-layout/receiving/': typeof AuthLayoutReceivingIndexRoute
  '/_auth-layout/reporting/': typeof AuthLayoutReportingIndexRoute
  '/_auth-layout/runs/': typeof AuthLayoutRunsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/settings'
    | '/'
    | '/accessions/$accessionId'
    | '/settings/organizations'
    | '/settings/panels'
    | '/accessions'
    | '/queue'
    | '/receiving'
    | '/reporting'
    | '/runs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/settings'
    | '/'
    | '/accessions/$accessionId'
    | '/settings/organizations'
    | '/settings/panels'
    | '/accessions'
    | '/queue'
    | '/receiving'
    | '/reporting'
    | '/runs'
  id:
    | '__root__'
    | '/_auth-layout'
    | '/_auth-layout/settings'
    | '/_auth-layout/'
    | '/_auth-layout/accessions/$accessionId'
    | '/_auth-layout/settings/organizations'
    | '/_auth-layout/settings/panels'
    | '/_auth-layout/accessions/'
    | '/_auth-layout/queue/'
    | '/_auth-layout/receiving/'
    | '/_auth-layout/reporting/'
    | '/_auth-layout/runs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth-layout"
      ]
    },
    "/_auth-layout": {
      "filePath": "_auth-layout.tsx",
      "children": [
        "/_auth-layout/settings",
        "/_auth-layout/",
        "/_auth-layout/accessions/$accessionId",
        "/_auth-layout/accessions/",
        "/_auth-layout/queue/",
        "/_auth-layout/receiving/",
        "/_auth-layout/reporting/",
        "/_auth-layout/runs/"
      ]
    },
    "/_auth-layout/settings": {
      "filePath": "_auth-layout/settings.tsx",
      "parent": "/_auth-layout",
      "children": [
        "/_auth-layout/settings/organizations",
        "/_auth-layout/settings/panels"
      ]
    },
    "/_auth-layout/": {
      "filePath": "_auth-layout/index.tsx",
      "parent": "/_auth-layout"
    },
    "/_auth-layout/accessions/$accessionId": {
      "filePath": "_auth-layout/accessions/$accessionId.tsx",
      "parent": "/_auth-layout"
    },
    "/_auth-layout/settings/organizations": {
      "filePath": "_auth-layout/settings.organizations.tsx",
      "parent": "/_auth-layout/settings"
    },
    "/_auth-layout/settings/panels": {
      "filePath": "_auth-layout/settings.panels.tsx",
      "parent": "/_auth-layout/settings"
    },
    "/_auth-layout/accessions/": {
      "filePath": "_auth-layout/accessions/index.tsx",
      "parent": "/_auth-layout"
    },
    "/_auth-layout/queue/": {
      "filePath": "_auth-layout/queue/index.tsx",
      "parent": "/_auth-layout"
    },
    "/_auth-layout/receiving/": {
      "filePath": "_auth-layout/receiving/index.tsx",
      "parent": "/_auth-layout"
    },
    "/_auth-layout/reporting/": {
      "filePath": "_auth-layout/reporting/index.tsx",
      "parent": "/_auth-layout"
    },
    "/_auth-layout/runs/": {
      "filePath": "_auth-layout/runs/index.tsx",
      "parent": "/_auth-layout"
    }
  }
}
ROUTE_MANIFEST_END */
