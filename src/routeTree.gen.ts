/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as IndexImport } from './routes/index'
import { Route as RunsIndexImport } from './routes/runs/index'
import { Route as ReportingIndexImport } from './routes/reporting/index'
import { Route as ReceivingIndexImport } from './routes/receiving/index'
import { Route as QueueIndexImport } from './routes/queue/index'
import { Route as AccessionsIndexImport } from './routes/accessions/index'
import { Route as SettingsPanelsImport } from './routes/settings.panels'
import { Route as SettingsOrganizationsImport } from './routes/settings.organizations'
import { Route as AccessionsAccessionIdImport } from './routes/accessions/$accessionId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RunsIndexRoute = RunsIndexImport.update({
  id: '/runs/',
  path: '/runs/',
  getParentRoute: () => rootRoute,
} as any)

const ReportingIndexRoute = ReportingIndexImport.update({
  id: '/reporting/',
  path: '/reporting/',
  getParentRoute: () => rootRoute,
} as any)

const ReceivingIndexRoute = ReceivingIndexImport.update({
  id: '/receiving/',
  path: '/receiving/',
  getParentRoute: () => rootRoute,
} as any)

const QueueIndexRoute = QueueIndexImport.update({
  id: '/queue/',
  path: '/queue/',
  getParentRoute: () => rootRoute,
} as any)

const AccessionsIndexRoute = AccessionsIndexImport.update({
  id: '/accessions/',
  path: '/accessions/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsPanelsRoute = SettingsPanelsImport.update({
  id: '/panels',
  path: '/panels',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsOrganizationsRoute = SettingsOrganizationsImport.update({
  id: '/organizations',
  path: '/organizations',
  getParentRoute: () => SettingsRoute,
} as any)

const AccessionsAccessionIdRoute = AccessionsAccessionIdImport.update({
  id: '/accessions/$accessionId',
  path: '/accessions/$accessionId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/accessions/$accessionId': {
      id: '/accessions/$accessionId'
      path: '/accessions/$accessionId'
      fullPath: '/accessions/$accessionId'
      preLoaderRoute: typeof AccessionsAccessionIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/organizations': {
      id: '/settings/organizations'
      path: '/organizations'
      fullPath: '/settings/organizations'
      preLoaderRoute: typeof SettingsOrganizationsImport
      parentRoute: typeof SettingsImport
    }
    '/settings/panels': {
      id: '/settings/panels'
      path: '/panels'
      fullPath: '/settings/panels'
      preLoaderRoute: typeof SettingsPanelsImport
      parentRoute: typeof SettingsImport
    }
    '/accessions/': {
      id: '/accessions/'
      path: '/accessions'
      fullPath: '/accessions'
      preLoaderRoute: typeof AccessionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/queue/': {
      id: '/queue/'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueIndexImport
      parentRoute: typeof rootRoute
    }
    '/receiving/': {
      id: '/receiving/'
      path: '/receiving'
      fullPath: '/receiving'
      preLoaderRoute: typeof ReceivingIndexImport
      parentRoute: typeof rootRoute
    }
    '/reporting/': {
      id: '/reporting/'
      path: '/reporting'
      fullPath: '/reporting'
      preLoaderRoute: typeof ReportingIndexImport
      parentRoute: typeof rootRoute
    }
    '/runs/': {
      id: '/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface SettingsRouteChildren {
  SettingsOrganizationsRoute: typeof SettingsOrganizationsRoute
  SettingsPanelsRoute: typeof SettingsPanelsRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsOrganizationsRoute: SettingsOrganizationsRoute,
  SettingsPanelsRoute: SettingsPanelsRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/accessions/$accessionId': typeof AccessionsAccessionIdRoute
  '/settings/organizations': typeof SettingsOrganizationsRoute
  '/settings/panels': typeof SettingsPanelsRoute
  '/accessions': typeof AccessionsIndexRoute
  '/queue': typeof QueueIndexRoute
  '/receiving': typeof ReceivingIndexRoute
  '/reporting': typeof ReportingIndexRoute
  '/runs': typeof RunsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/accessions/$accessionId': typeof AccessionsAccessionIdRoute
  '/settings/organizations': typeof SettingsOrganizationsRoute
  '/settings/panels': typeof SettingsPanelsRoute
  '/accessions': typeof AccessionsIndexRoute
  '/queue': typeof QueueIndexRoute
  '/receiving': typeof ReceivingIndexRoute
  '/reporting': typeof ReportingIndexRoute
  '/runs': typeof RunsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/accessions/$accessionId': typeof AccessionsAccessionIdRoute
  '/settings/organizations': typeof SettingsOrganizationsRoute
  '/settings/panels': typeof SettingsPanelsRoute
  '/accessions/': typeof AccessionsIndexRoute
  '/queue/': typeof QueueIndexRoute
  '/receiving/': typeof ReceivingIndexRoute
  '/reporting/': typeof ReportingIndexRoute
  '/runs/': typeof RunsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/accessions/$accessionId'
    | '/settings/organizations'
    | '/settings/panels'
    | '/accessions'
    | '/queue'
    | '/receiving'
    | '/reporting'
    | '/runs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/accessions/$accessionId'
    | '/settings/organizations'
    | '/settings/panels'
    | '/accessions'
    | '/queue'
    | '/receiving'
    | '/reporting'
    | '/runs'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/accessions/$accessionId'
    | '/settings/organizations'
    | '/settings/panels'
    | '/accessions/'
    | '/queue/'
    | '/receiving/'
    | '/reporting/'
    | '/runs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  AccessionsAccessionIdRoute: typeof AccessionsAccessionIdRoute
  AccessionsIndexRoute: typeof AccessionsIndexRoute
  QueueIndexRoute: typeof QueueIndexRoute
  ReceivingIndexRoute: typeof ReceivingIndexRoute
  ReportingIndexRoute: typeof ReportingIndexRoute
  RunsIndexRoute: typeof RunsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRouteWithChildren,
  AccessionsAccessionIdRoute: AccessionsAccessionIdRoute,
  AccessionsIndexRoute: AccessionsIndexRoute,
  QueueIndexRoute: QueueIndexRoute,
  ReceivingIndexRoute: ReceivingIndexRoute,
  ReportingIndexRoute: ReportingIndexRoute,
  RunsIndexRoute: RunsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/accessions/$accessionId",
        "/accessions/",
        "/queue/",
        "/receiving/",
        "/reporting/",
        "/runs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/organizations",
        "/settings/panels"
      ]
    },
    "/accessions/$accessionId": {
      "filePath": "accessions/$accessionId.tsx"
    },
    "/settings/organizations": {
      "filePath": "settings.organizations.tsx",
      "parent": "/settings"
    },
    "/settings/panels": {
      "filePath": "settings.panels.tsx",
      "parent": "/settings"
    },
    "/accessions/": {
      "filePath": "accessions/index.tsx"
    },
    "/queue/": {
      "filePath": "queue/index.tsx"
    },
    "/receiving/": {
      "filePath": "receiving/index.tsx"
    },
    "/reporting/": {
      "filePath": "reporting/index.tsx"
    },
    "/runs/": {
      "filePath": "runs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
